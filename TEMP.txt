    #Arqueo de Efectivo-------------------------------------------------
    def save_denomination_count(self, fecha, currency_type, denomination, count, subtotal, exchange_rate=None):
        """
        Save denomination count without requiring a cash_count_id
        Args:
            fecha: Date of the count
            currency_type: 'nio' or 'usd'
            denomination: Denomination value
            count: Number of bills/coins
            subtotal: Total value
            exchange_rate: Exchange rate for USD (only needed for USD)
        """
        if currency_type.lower() == 'nio':
            query = """
            INSERT INTO cash_count_denominations (nio_denominations, count, subtotal)
            VALUES (?, ?, ?)
            """
            params = (denomination, count, subtotal)
        else:
            query = """
            INSERT INTO cash_count_denominations (us_denominations, count, subtotal, exchange_rate)
            VALUES (?, ?, ?, ?)
            """
            params = (denomination, count, subtotal, exchange_rate)
            
        self._execute_query(query, params)
        
    def get_denominations_by_date(self, fecha):
        """
        Get all denominations for a specific date
        """
        query = """
        SELECT cd.id, cd.nio_denominations, cd.us_denominations, cd.exchange_rate, cd.count, cd.subtotal
        FROM cash_count_denominations cd
        JOIN cash_count cc ON cd.id_cash_count = cc.id
        WHERE cc.register_date = ?
        """
        cursor = self._execute_query(query, (fecha,))
        return cursor.fetchall()

    def _validate_payment_method(self, metodo_pago):
        """Validates if the payment method is allowed."""
        valid_methods = ['efectivo', 'tarjeta', 'transferencia', 'cheque', 'deposito', 'otro']
        if metodo_pago.lower() not in valid_methods:
            raise ValueError(f"Método de pago inválido. Debe ser uno de: {', '.join(valid_methods)}")
        return metodo_pago.lower()

    def create_entry(self, fecha, descripcion, monto, tipo, metodo_pago, movimiento_caja, user_id, order_id):
        print(fecha, descripcion, monto, tipo, metodo_pago, movimiento_caja, user_id, order_id)
        try:
            # Validate payment method before insertion
            metodo_pago = self._validate_payment_method(metodo_pago)
            query = """
                INSERT INTO cashbox (fecha, descripcion, monto, tipo, metodo_pago, movimiento_caja, user_id, order_id)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?);
            """
            params = (fecha, descripcion, monto, tipo, metodo_pago, movimiento_caja, user_id, order_id)
            self._execute_query(query, params)
        except ValueError as e:
            raise ValueError(f"Error de validación: {str(e)}")

    def read_entry(self, entry_id):
        query = "SELECT * FROM cashbox WHERE id = ?;"
        params = (entry_id,)
        return self._execute_query(query, params).fetchone()

    def read_all_entries(self):
        query = "SELECT * FROM cashbox;"
        return self._execute_query(query).fetchall()

    def update_entry(self, entry_id, fecha, descripcion, monto, tipo, metodo_pago, movimiento_caja, user_id, order_id):
        try:
            # Validate payment method
            metodo_pago = self._validate_payment_method(metodo_pago)
            
            # Validate transaction type
            if tipo.lower() not in ['ingreso', 'egreso']:
                raise ValueError("Tipo de transacción inválido. Debe ser 'ingreso' o 'egreso'")
            
            query = """
                UPDATE cashbox
                SET fecha = ?, descripcion = ?, monto = ?, tipo = ?, metodo_pago = ?, user_id = ?, order_id = ?
                WHERE id = ?;
            """
            params = (fecha, descripcion, monto, tipo.lower(), metodo_pago, movimiento_caja, user_id, order_id, entry_id)
            self._execute_query(query, params)
        except ValueError as e:
            raise ValueError(f"Error de validación: {str(e)}")

    def delete_entry(self, entry_id):
        query = "DELETE FROM cashbox WHERE id = ?;"
        params = (entry_id,)
        self._execute_query(query, params)
    